/**
 * This class is generated by jOOQ
 */
package de.edgesoft.refereemanager.jooq.tables;


import de.edgesoft.refereemanager.jooq.Keys;
import de.edgesoft.refereemanager.jooq.Refereemanager;
import de.edgesoft.refereemanager.jooq.tables.records.RefereesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Storage of all referees.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Referees extends TableImpl<RefereesRecord> {

    private static final long serialVersionUID = -288923510;

    /**
     * The reference instance of <code>refereemanager.rfrmgr_referees</code>
     */
    public static final Referees RFRMGR_REFEREES = new Referees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefereesRecord> getRecordType() {
        return RefereesRecord.class;
    }

    /**
     * The column <code>refereemanager.rfrmgr_referees.id</code>.
     */
    public final TableField<RefereesRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referees.person_id</code>.
     */
    public final TableField<RefereesRecord, UInteger> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referees.docs_per_letter</code>.
     */
    public final TableField<RefereesRecord, Byte> DOCS_PER_LETTER = createField("docs_per_letter", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>refereemanager.rfrmgr_referees</code> table reference
     */
    public Referees() {
        this("rfrmgr_referees", null);
    }

    /**
     * Create an aliased <code>refereemanager.rfrmgr_referees</code> table reference
     */
    public Referees(String alias) {
        this(alias, RFRMGR_REFEREES);
    }

    private Referees(String alias, Table<RefereesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Referees(String alias, Table<RefereesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Storage of all referees.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Refereemanager.REFEREEMANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RefereesRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_RFRMGR_REFEREES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RefereesRecord> getPrimaryKey() {
        return Keys.KEY_RFRMGR_REFEREES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RefereesRecord>> getKeys() {
        return Arrays.<UniqueKey<RefereesRecord>>asList(Keys.KEY_RFRMGR_REFEREES_PRIMARY, Keys.KEY_RFRMGR_REFEREES_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Referees as(String alias) {
        return new Referees(alias, this);
    }

    /**
     * Rename this table
     */
    public Referees rename(String name) {
        return new Referees(name, null);
    }
}
