/**
 * This class is generated by jOOQ
 */
package de.edgesoft.refereemanager.jooq.tables;


import de.edgesoft.refereemanager.jooq.Keys;
import de.edgesoft.refereemanager.jooq.Refereemanager;
import de.edgesoft.refereemanager.jooq.tables.records.RefereeRelationsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Relations between referees and clubs: member and/or reffor.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefereeRelations extends TableImpl<RefereeRelationsRecord> {

    private static final long serialVersionUID = 1867580993;

    /**
     * The reference instance of <code>refereemanager.rfrmgr_referee_relations</code>
     */
    public static final RefereeRelations RFRMGR_REFEREE_RELATIONS = new RefereeRelations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefereeRelationsRecord> getRecordType() {
        return RefereeRelationsRecord.class;
    }

    /**
     * The column <code>refereemanager.rfrmgr_referee_relations.id</code>.
     */
    public final TableField<RefereeRelationsRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referee_relations.referee_id</code>.
     */
    public final TableField<RefereeRelationsRecord, UInteger> REFEREE_ID = createField("referee_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referee_relations.referee_relation_type_id</code>.
     */
    public final TableField<RefereeRelationsRecord, UInteger> REFEREE_RELATION_TYPE_ID = createField("referee_relation_type_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referee_relations.club_id</code>.
     */
    public final TableField<RefereeRelationsRecord, UInteger> CLUB_ID = createField("club_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referee_relations.season_id</code>.
     */
    public final TableField<RefereeRelationsRecord, UInteger> SEASON_ID = createField("season_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_referee_relations.remark</code>.
     */
    public final TableField<RefereeRelationsRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>refereemanager.rfrmgr_referee_relations</code> table reference
     */
    public RefereeRelations() {
        this("rfrmgr_referee_relations", null);
    }

    /**
     * Create an aliased <code>refereemanager.rfrmgr_referee_relations</code> table reference
     */
    public RefereeRelations(String alias) {
        this(alias, RFRMGR_REFEREE_RELATIONS);
    }

    private RefereeRelations(String alias, Table<RefereeRelationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefereeRelations(String alias, Table<RefereeRelationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Relations between referees and clubs: member and/or reffor.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Refereemanager.REFEREEMANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RefereeRelationsRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_RFRMGR_REFEREE_RELATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RefereeRelationsRecord> getPrimaryKey() {
        return Keys.KEY_RFRMGR_REFEREE_RELATIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RefereeRelationsRecord>> getKeys() {
        return Arrays.<UniqueKey<RefereeRelationsRecord>>asList(Keys.KEY_RFRMGR_REFEREE_RELATIONS_PRIMARY, Keys.KEY_RFRMGR_REFEREE_RELATIONS_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RefereeRelations as(String alias) {
        return new RefereeRelations(alias, this);
    }

    /**
     * Rename this table
     */
    public RefereeRelations rename(String name) {
        return new RefereeRelations(name, null);
    }
}
