/**
 * This class is generated by jOOQ
 */
package de.edgesoft.refereemanager.jooq.tables;


import de.edgesoft.refereemanager.jooq.Keys;
import de.edgesoft.refereemanager.jooq.Refereemanager;
import de.edgesoft.refereemanager.jooq.tables.records.TeamsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * All teams.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teams extends TableImpl<TeamsRecord> {

    private static final long serialVersionUID = 369098769;

    /**
     * The reference instance of <code>refereemanager.rfrmgr_teams</code>
     */
    public static final Teams RFRMGR_TEAMS = new Teams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamsRecord> getRecordType() {
        return TeamsRecord.class;
    }

    /**
     * The column <code>refereemanager.rfrmgr_teams.id</code>.
     */
    public final TableField<TeamsRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_teams.club_id</code>.
     */
    public final TableField<TeamsRecord, UInteger> CLUB_ID = createField("club_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_teams.league_type_id</code>.
     */
    public final TableField<TeamsRecord, UInteger> LEAGUE_TYPE_ID = createField("league_type_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_teams.number</code>.
     */
    public final TableField<TeamsRecord, UInteger> NUMBER = createField("number", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>refereemanager.rfrmgr_teams.name</code>.
     */
    public final TableField<TeamsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_teams.remark</code>.
     */
    public final TableField<TeamsRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>refereemanager.rfrmgr_teams</code> table reference
     */
    public Teams() {
        this("rfrmgr_teams", null);
    }

    /**
     * Create an aliased <code>refereemanager.rfrmgr_teams</code> table reference
     */
    public Teams(String alias) {
        this(alias, RFRMGR_TEAMS);
    }

    private Teams(String alias, Table<TeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teams(String alias, Table<TeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "All teams.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Refereemanager.REFEREEMANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TeamsRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_RFRMGR_TEAMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeamsRecord> getPrimaryKey() {
        return Keys.KEY_RFRMGR_TEAMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeamsRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamsRecord>>asList(Keys.KEY_RFRMGR_TEAMS_PRIMARY, Keys.KEY_RFRMGR_TEAMS_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teams as(String alias) {
        return new Teams(alias, this);
    }

    /**
     * Rename this table
     */
    public Teams rename(String name) {
        return new Teams(name, null);
    }
}
