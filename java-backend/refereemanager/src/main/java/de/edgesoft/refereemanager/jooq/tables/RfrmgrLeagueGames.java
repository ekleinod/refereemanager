/**
 * This class is generated by jOOQ
 */
package de.edgesoft.refereemanager.jooq.tables;


import de.edgesoft.refereemanager.jooq.Keys;
import de.edgesoft.refereemanager.jooq.Refereemanager;
import de.edgesoft.refereemanager.jooq.tables.records.RfrmgrLeagueGamesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Assignments for league games.
 * League and season can be deduc / * comment truncated * / / *ed from the 
 * associated teams, they are stored because no team could be specified or 
 * teams of different seasons/leagues (e.g. relegation games).* /
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RfrmgrLeagueGames extends TableImpl<RfrmgrLeagueGamesRecord> {

    private static final long serialVersionUID = -699264554;

    /**
     * The reference instance of <code>refereemanager.rfrmgr_league_games</code>
     */
    public static final RfrmgrLeagueGames RFRMGR_LEAGUE_GAMES = new RfrmgrLeagueGames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RfrmgrLeagueGamesRecord> getRecordType() {
        return RfrmgrLeagueGamesRecord.class;
    }

    /**
     * The column <code>refereemanager.rfrmgr_league_games.id</code>.
     */
    public final TableField<RfrmgrLeagueGamesRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_league_games.assignment_id</code>.
     */
    public final TableField<RfrmgrLeagueGamesRecord, UInteger> ASSIGNMENT_ID = createField("assignment_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_league_games.game_number</code>.
     */
    public final TableField<RfrmgrLeagueGamesRecord, UInteger> GAME_NUMBER = createField("game_number", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_league_games.season_id</code>.
     */
    public final TableField<RfrmgrLeagueGamesRecord, UInteger> SEASON_ID = createField("season_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_league_games.league_id</code>.
     */
    public final TableField<RfrmgrLeagueGamesRecord, UInteger> LEAGUE_ID = createField("league_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>refereemanager.rfrmgr_league_games.team_venue_id</code>. Only filled if team plays outside their normal location.
     */
    public final TableField<RfrmgrLeagueGamesRecord, UInteger> TEAM_VENUE_ID = createField("team_venue_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "Only filled if team plays outside their normal location.");

    /**
     * Create a <code>refereemanager.rfrmgr_league_games</code> table reference
     */
    public RfrmgrLeagueGames() {
        this("rfrmgr_league_games", null);
    }

    /**
     * Create an aliased <code>refereemanager.rfrmgr_league_games</code> table reference
     */
    public RfrmgrLeagueGames(String alias) {
        this(alias, RFRMGR_LEAGUE_GAMES);
    }

    private RfrmgrLeagueGames(String alias, Table<RfrmgrLeagueGamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RfrmgrLeagueGames(String alias, Table<RfrmgrLeagueGamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Assignments for league games.\nLeague and season can be deduc /* comment truncated */ /*ed from the associated teams, they are stored because no team could be specified or teams of different seasons/leagues (e.g. relegation games).*/");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Refereemanager.REFEREEMANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RfrmgrLeagueGamesRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_RFRMGR_LEAGUE_GAMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RfrmgrLeagueGamesRecord> getPrimaryKey() {
        return Keys.KEY_RFRMGR_LEAGUE_GAMES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RfrmgrLeagueGamesRecord>> getKeys() {
        return Arrays.<UniqueKey<RfrmgrLeagueGamesRecord>>asList(Keys.KEY_RFRMGR_LEAGUE_GAMES_PRIMARY, Keys.KEY_RFRMGR_LEAGUE_GAMES_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RfrmgrLeagueGames as(String alias) {
        return new RfrmgrLeagueGames(alias, this);
    }

    /**
     * Rename this table
     */
    public RfrmgrLeagueGames rename(String name) {
        return new RfrmgrLeagueGames(name, null);
    }
}
